import { useState, useCallback } from 'react';
import { parseAIFlowData, positionNodes } from '../../../services/aiFlowService';

/**
 * Custom hook to handle AI flow generation functionality
 * Manages the opening/closing of the AIFlowBuilder and processing generated flows
 */
export function useAIGenerator({
  nodes,
  edges,
  setNodes,
  setEdges,
  onNodesChange,
  onEdgesChange,
  canEdit,
  reactFlowInstance,
  setMessage,
  setSeverity,
  setOpen
}) {
  // State for AI Flow Builder dialog
  const [aiFlowBuilderOpen, setAiFlowBuilderOpen] = useState(false);
  
  // Function to open the AI Flow Builder
  const openAIGenerator = useCallback(() => {
    setAiFlowBuilderOpen(true);
  }, []);
  
  // Function to close the AI Flow Builder
  const closeAIGenerator = useCallback(() => {
    setAiFlowBuilderOpen(false);
  }, []);
  
  // Handle the flow generated by the AI
  const onFlowGenerated = useCallback((flowData) => {
    if (!canEdit) {
      setMessage("Vous n'avez pas la permission de modifier ce flow");
      setSeverity('error');
      setOpen(true);
      return;
    }
    
    try {
      // Parse the AI-generated flow data
      const { nodes: aiNodes, edges: aiEdges } = parseAIFlowData(flowData);
      
      // Position the nodes in a logical layout
      const positionedNodes = positionNodes(aiNodes, aiEdges);
      
      // Add the nodes and edges to the diagram
      setNodes(prevNodes => [...prevNodes, ...positionedNodes]);
      setEdges(prevEdges => [...prevEdges, ...aiEdges]);
      
      // Notify parent components
      if (onNodesChange) onNodesChange([...nodes, ...positionedNodes]);
      if (onEdgesChange) onEdgesChange([...edges, ...aiEdges]);
      
      // Show success message
      setMessage('Flux généré avec succès !');
      setSeverity('success');
      setOpen(true);
      
      // Fit view to show the new nodes
      setTimeout(() => {
        if (reactFlowInstance) {
          reactFlowInstance.fitView({ padding: 0.2 });
        }
      }, 100);
    } catch (error) {
      console.error('Error processing AI flow data:', error);
      setMessage('Erreur lors de la génération du flux');
      setSeverity('error');
      setOpen(true);
    }
  }, [
    canEdit, 
    nodes, 
    edges, 
    setNodes, 
    setEdges, 
    onNodesChange, 
    onEdgesChange, 
    reactFlowInstance, 
    setMessage, 
    setSeverity, 
    setOpen
  ]);
  
  return {
    aiFlowBuilderOpen,
    openAIGenerator,
    closeAIGenerator,
    onFlowGenerated
  };
}
